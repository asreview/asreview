# First stage
FROM python:3.11-slim AS builder

WORKDIR /app

# Copy and build asreview
# git is used by versioneer to define the project version
COPY . /app
RUN rm -rf /app/asreview/webapp/build
RUN rm -rf /app/asreview/webapp/node_modules
RUN rm -rf /app/asreview/webapp/public
RUN rm -rf /app/asreview/webapp/src

RUN apt-get update \
    && apt-get install -y git build-essential libpq-dev\
    && pip3 install --upgrade pip setuptools \
    && pip3 install --user gunicorn \
    && pip3 install --user psycopg2 \
    && pip3 install --user . \
    && pip3 install --user asreview-datatools asreview-insights asreview-makita asreview-wordcloud


# Second stage
FROM python:3.11-slim

# arguments
ARG EMAIL_PASSWORD
ARG BACKEND_INTERNAL_PORT_ARG
ARG WORKERS
ARG SQLALCHEMY_DATABASE_URI
ARG CREATE_TABLES

# install necessary libs
RUN apt-get update && apt-get install -y libpq-dev

WORKDIR /app
COPY --from=builder /root/.local /root/.local

# copy config TOML file to Image
COPY ./Docker/auth_verified/flask_config.toml ${WORKDIR}

# the TOML file needs to be configured with the database parameters
# and email password, we use the sed command to search and insert (replace)
# necessary parameters
RUN sed -i "s|--SQLALCHEMY_DATABASE_URI--|${SQLALCHEMY_DATABASE_URI}|g" ./flask_config.toml
RUN sed -i "s|--EMAIL_PASSWORD--|${EMAIL_PASSWORD}|g" ./flask_config.toml

# set env variables, this is how the TOML config is communicated
# to the app via Gunicorn
ENV PATH=/root/.local/bin:$PATH
ENV ASREVIEW_PATH=/app/project_folder
ENV FLASK_CONFIGFILE=/app/flask_config.toml

# set the working directory to the app
WORKDIR /root/.local/lib/python3.11/site-packages/asreview/webapp
# copy the module that allows Gunicorn to run the app
COPY ./Docker/auth_verified/wsgi.py ${WORKDIR}

# create Gunicorn config file
RUN echo "preload_app = True" > gunicorn.conf.py
RUN echo "bind = \"0.0.0.0:${BACKEND_INTERNAL_PORT_ARG}\"" >> gunicorn.conf.py
RUN echo "workers = ${WORKERS}" >> gunicorn.conf.py

# create start script to ensure creating all necessary tables and
# runs the Gunicorn command
RUN echo "#!/bin/bash" > start.sh
RUN echo "${CREATE_TABLES}" >> start.sh
RUN echo "gunicorn -c gunicorn.conf.py wsgi:app" >> start.sh
RUN ["chmod", "+x", "start.sh"]

ENTRYPOINT [ "/root/.local/lib/python3.11/site-packages/asreview/webapp/start.sh" ]
